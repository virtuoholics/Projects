resource "aws_rds_cluster" "rds_for_eks" {
  cluster_identifier                  = "aurora-postgres"
  engine                              = "aurora-postgresql"
  engine_version                      = "14.5"
  engine_mode                         = "provisioned"
  database_name                       = "noaa"
  master_username                     = "postgres"
  master_password                     = vault_kv_secret_v2.db_password.data["DB_PASSWORD"]
  db_cluster_parameter_group_name     = aws_rds_cluster_parameter_group.rds_cluster.name
  backup_retention_period             = 1 #default
  preferred_backup_window             = "02:00-03:00"
  availability_zones                  = [aws_subnet.eks_2.availability_zone, aws_subnet.eks_4.availability_zone]
  db_subnet_group_name                = aws_db_subnet_group.rds_cluster.id
  vpc_security_group_ids              = [aws_security_group.rds_cluster.id]
  port                                = 5432
  iam_database_authentication_enabled = false
  copy_tags_to_snapshot               = false
  skip_final_snapshot                 = true
  deletion_protection                 = false


  tags = {
    env = "prod"
  }

  lifecycle {
    ignore_changes = [availability_zones, master_password]
  }

  depends_on = [
    vault_kv_secret_v2.db_password,
  ]
}

resource "aws_rds_cluster_instance" "rds_for_eks" {
  count                = 2
  identifier           = "rds-instances-${count.index}"
  cluster_identifier   = aws_rds_cluster.rds_for_eks.id
  instance_class       = "db.t3.medium"
  engine               = aws_rds_cluster.rds_for_eks.engine
  engine_version       = aws_rds_cluster.rds_for_eks.engine_version
  db_subnet_group_name = aws_db_subnet_group.rds_cluster.id
}


resource "aws_db_subnet_group" "rds_cluster" {
  name       = "rds-cluster"
  subnet_ids = [aws_subnet.eks_2.id, aws_subnet.eks_4.id]
}

resource "aws_security_group" "rds_cluster" {
  name   = "rds-cluster"
  vpc_id = aws_vpc.devsecops_project.id

  ingress {
    from_port   = 5432
    to_port     = 5432
    protocol    = "tcp"
    cidr_blocks = [aws_vpc.devsecops_project.cidr_block]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "rds-cluster"
  }
}

resource "aws_rds_cluster_parameter_group" "rds_cluster" {
  name   = "rds-cluster"
  family = "aurora-postgresql14"
}

resource "aws_iam_role" "rds" {
  name               = "rds"
  assume_role_policy = data.aws_iam_policy_document.rds.json
}

data "aws_iam_policy_document" "rds" {
  statement {
    actions = ["sts:AssumeRole"]
    principals {
      type        = "Service"
      identifiers = ["rds.amazonaws.com"]
    }
  }
}

resource "aws_iam_role_policy_attachment" "rds" {
  role       = aws_iam_role.rds.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
}

resource "aws_rds_cluster_role_association" "rds" {
  db_cluster_identifier = aws_rds_cluster.rds_for_eks.id
  feature_name          = "Lambda" # This is just a placeholder and serves no actual purpose. It's required to create the role association.
  role_arn              = aws_iam_role.rds.arn
}
